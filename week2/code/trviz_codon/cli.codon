import sys
from .utils import (
    get_sample_and_sequence_from_fasta,
    is_valid_sequence,
    get_levenshtein_distance,
    add_padding,
    _distance_matrix
)

def main():
    if len(sys.argv) < 2:
        print("ERR missing command")
        sys.exit(2)
    cmd = sys.argv[1]

    if cmd == "utils.get_fasta":
        if len(sys.argv) < 3:
            print("ERR need fasta path")
            sys.exit(2)
        path = sys.argv[2]
        headers, seqs = get_sample_and_sequence_from_fasta(path)
        # Print TSV: one "header<TAB>SEQUENCE" per line (easy for Python to parse)
        for i in range(len(headers)):
            print(headers[i] + "\t" + seqs[i])
        return

    if cmd == "utils.is_valid_seq":
        if len(sys.argv) < 3:
            print("ERR need sequence"); sys.exit(2)
        seq = sys.argv[2].upper()
        print("1" if is_valid_sequence(seq) else "0")
        return

    if cmd == "utils.levenshtein":
        if len(sys.argv) < 4:
            print("ERR need two strings"); sys.exit(2)
        s1 = sys.argv[2]; s2 = sys.argv[3]
        print(get_levenshtein_distance(s1, s2))
        return

    if cmd == "utils.add_padding":
        if len(sys.argv) < 3:
            # pass sequences as positional args; each is one encoded string
            print("ERR need at least one encoded string"); sys.exit(2)
        # args 2..N are the sequences
        items = []
        i = 2
        while i < len(sys.argv):
            items.append(sys.argv[i])
            i += 1
        res = add_padding(items)
        # print one padded string per line
        for r in res:
            print(r)
        return

    if cmd == "utils.distance_matrix":
        if len(sys.argv) < 3:
            print("ERR need at least one pair sym:motif"); sys.exit(2)
        # args 2..N are "sym:motif" pairs
        pairs = []
        i = 2
        while i < len(sys.argv):
            pairs.append(sys.argv[i])
            i += 1
        lines = _distance_matrix(pairs)
        for ln in lines:
            print(ln)
        return

    print("ERR unknown cmd")
    sys.exit(2)

if __name__ == "__main__":
    main()
